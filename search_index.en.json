[{"url":"https://agustinramirodiaz.github.io/blog/","title":"Agustín's Blog","description":null,"body":"","path":null},{"url":"https://agustinramirodiaz.github.io/blog/docker-file-permissions/","title":"Understanding Linux file permissions in Docker containers","description":null,"body":"Motivation\nI recently wanted to work in the surrealdb codebase, and by looking at its issues I’ve found one related to file permissions in Docker. I remember having some vague knowledge about issues with file permissions before, and I thought it would be a good time to clear my doubts.\nUnderstanding file permissions\nFile permissions in Linux\nI won’t go into too much detail because there are great resources that explain this better than me. Heres’s a brief summary:\nIn Linux, file permissions are managed by the kernel. Each file has an owner, a group, and a set of permissions. The owner is the user who created the file, and the group is a set of users who have the same permissions over the file. The permissions are divided into three categories: read, write, and execute. Each category has three possible values: allowed, denied, and not set. The permissions are represented by a 9-character string, where the first three characters represent the owner’s permissions, the next three characters represent the group’s permissions, and the last three characters represent the permissions for everyone else.\nThis permissions are usually handled with numbers or leters when running commands like chmod. The numbers are octal, and the letters are r for read, w for write, and x for execute. The numbers are calculated by adding the values of the permissions: 4 for read, 2 for write, and 1 for execute. For example, if we want to give read and write permissions to the owner, and read permissions to the group and everyone else, we would run chmod 644 file.txt. This would set the permissions to -rw-r--r--. We can also use the letters to set the permissions, for example, chmod u+x file.txt would add the execute permission to the owner.\nFile permissions in Docker containers\nDocker containers are isolated environments, but they still run on top of the host’s kernel. This means that the file permissions are managed by the host’s kernel, and the container’s kernel is not involved in this process. This is important to understand because it means that the file permissions inside the container are the same as the file permissions on the host. This can lead to issues for example when the container and the host have different users and groups.\nBy default, the container user is set to root with uid and gid 0. This means that if we create a file inside the container, root will be the owner of the file. This can lead to issues when we try to access the file from the host, because the host’s user might not have the same uid as the container’s root. This can be solved by using the --user flag when running the container, which allows us to specify the uid and gid of the container’s user. This way, we can make sure that the container’s user has the same uid and gid as the host’s user.\nExample with default root user:\n\nExample with custom user:\n\nSurrealDB issue\nThis issue commented a problem with file permissions when running the container. Here’s the excerpt:\n\nThe problem here is that the container is trying to create a file inside the /mydata directory, but it doesn’t have the permissions to do so. To know exactly what the problem is, we would need to know the permissions of the /mydata directory on the host, and the user used in the container.\nChecking out the permissions of the /mydata directory is easy\n\nHere we can see that the /mydata directory is owned by root, and it has read, write, and execute permissions for the owner, and read and execute permissions for the group and execute for everyone else. This means that the container needs to run as root in order to create files inside the /mydata directory. Let’s test that out:\n\nThe container ran successfully as root!\nThe twist\nYou might be asking yourself Isn’t there an alternative to running the container as root?. The answer is yes! and we need to take a closer look at our /mydata directory in our host machine. Do you remember creating it? No! That’s because the docker daemon created it for you when you ran docker run -v .... By default, docker will create the folder with root user and group. We can change this by previously creating the folder with the correct user and group.\n\nBut wait, I got an error! That’s because the container is not running with the same user and group as the host. We can fix this by running the container with the same user and group as the host.\n\nGoing a bit deeper\nIf you’ve got experience with Docker, you might be thinking that it’s weird that you havent’ gotten to this problem earlier with other containers. There are 2 reasons for this:\n\nusually, containers run with root user, giving the container full access over your files\nwhen the containers run with a different user, they usually run with the default user that has the same uid and gid as the host’s user (1000:1000 in unix systems)\n\nThe problem in the surrealdb image is that it doesn’t follow the second point. We can check what user and group the container is running with by running the id command inside the container. We can do this by creating a new Dockerfile that copies the id command from a busybox image and running it inside the container.\n\nThen we build the image and run the id command inside the container with -u and -g flags to get the user and group.\n\nThe surrealdb container is running with user and group 65532:65532. If we were to create another image and add USER 1000 to the Dockerfile, we wouldn’t need to specify the --user flag when running the container (if we are using the default 1000:1000 user in the host).\nConclusion\nIn this post, we’ve learned about file permissions in Linux and Docker containers. We’ve seen how the file permissions are managed by the host’s kernel, and how the container’s user can affect the file permissions. We’ve also seen how to solve file permission issues by running the container with the correct user and group. I hope this post has been helpful, and that you now have a better understanding of file permissions in Docker containers\n","path":null},{"url":"https://agustinramirodiaz.github.io/blog/gh-action-get-pages-url/","title":"Dinamically get the URL of a GitHub Pages site in a GitHub Action","description":null,"body":"How to get the URL of a GitHub Pages site in a GitHub Action\nWe can use GitHub’s CLI in order to retrieve the Github Pages site with\n\nLuckily, $GITHUB_REPOSITORY is a predefined environment variable in GitHub Actions, so we can use it to get the URL of the GitHub Pages site.\n\n","path":null},{"url":"https://agustinramirodiaz.github.io/","title":"","description":null,"body":"Who am I?\nI am a software engineer with a passion for building things. I consider myself a fast learner and a team player. I am always looking for new challenges and opportunities to grow.\nIn my free time I like to do Acroyoga and Acroduo.\n\nCulture\nI believe that the best way to learn is by doing, and the best way to teach is by example. I have a strong belief in the power of collaboration and the importance of having a clear and open communication channel. I am always open to feedback and I believe that it is the best way to grow as a person and as a professional.\nI thrive for a healthy work-life balance and I try to maintain a positive attitude towards my work and my team. I am always looking for ways to improve myself and my skills, and for new challenges and opportunities to grow.\nI’ve become a fan of asynchronous culture due to the flexibility and productivity it provides. I think it improves knowledge sharing, transparency and inclusivity.\n\nMain areas of Knowledge\n\nManaging Kubernetes and integrating with its APIs\nInfrastructure as Code with Terraform\nCloud Providers: Google Cloud Platform, AWS\nDevOps practices with GitOps and CI/CD\nWeb Development\n\nBackend: Golang, C#, Python, Rust\nFrontend: Angular, HTML, CSS, JavaScript, TypeScript\n\n\nWeb3 with Ethereum\n\nMy experience\nEngineer at GenLayer Labs building GenLayer\n\n2024 - Present\n\nGenLayer Node Developer\nBuilding the GenLayer Node, a decentralized executor for the GenVM, responsible of processing GenLayer transactions.\nGo, Solidity, Python, TypeScript\ndApps builder\nNextJS, Typescript\n\nIntelligent Oracle(repo)\nRally\n\n@Developer Experience\nPython, VueJS, TypeScript, Solidity\n\nGenLayer Studio\ngenlayer-js\n\n@DevOps\nAutomatic deployment of infrastructure using\n\nAnsible + GCP VMs + CloudFlare + docker compose\nTerraform, Google Cloud Run\n\nCI/CD pipelines with GitHub Actions\nFreelance\n\n2024\n\nContainerization and migration to AWS at SZICOM\nAfter gaining a lot of Cloud Infrastructure experience I’ve worked with SZICOM to help them with the migration of their infrastructure to AWS.\nThis involved primarily dockerization of their applications in Dotnet and Angular, and working with AWS resources like CodeBuild, CodePipeline, ECS, ECR, S3, Lambda, RDS, CloudWatch, CloudFormation, CloudFront, and IAM.\nDeveloper at Okteto\n\n2022-2024\n\nPlatform Infrastructure at Okteto\nDue to high demand, I moved to the infrastructure team to help with the development of the SaaS platform with:\n\nTerraform and Terraform Cloud with custom pipelines done with GitOps to manage 20+ customer environments.\n\neach environment had its own resources, from VPC to Kubernetes cluster with Okteto installed.\n\n\nGoogle Cloud Platform as our cloud provider\n\nI was in charge of the Monitoring and Alerting project, where we used AlertManager, Prometheus and Grafana.\n\n\n\nIn this time I’ve learned a lot about the infrastructure side of Kubernetes and explored some popular helm charts like NGINX. I’ve also became very comfortable working with Google Cloud Platform services and got to explore a bit of AWS and Azure.\nBackend Software Developer at Okteto\nI’ve worked on the backend team\n\ndeveloping a multi-service Helm chart\nusing golang to interact with Kubernetes\nokteto CLI tool for interacting with the Okteto Platform and the Kubernetes cluster.\nbackend API using GraphQL\n\nIn this time, I’ve learned a lot about Kubernetes in depth, by managing and creating resources such as CRDs, Operators, Controllers and Webhooks.\nI’ve gotten to know better the container ecosystem by using Docker and containerd while working with Buildkit and Kubernetes.\nI’ve also improved my craft as a developer with golang, learning about its design patterns and the its “idiomatic” code. I’ve got to work with some famous packages such as client-go, cobra and require.\nData Science member at Héritas\n\n2021-2022\n\nI had the opportunity to work with a small and amazing team of data scientists, computer scientists and bioinformatics in a genetics based presicion medicine company.\nI got to work in many areas and with many tooling:\n\nSys Admin:\n\nContainerization with docker\nServer management (of our own servers with CentOS and Ubuntu)\nThird party cloud service providers (Digital Ocean, Google Cloud)\n\n\nProgramming languages:\n\nScripting in bash\npython\n\nWe took advantage of JIRA’s issues workflow and took it to its limits through the web API to manage our process workflow.\nData analysis and manipulation with pandas and numpy\n\n\nR\n\nshiny web framework\nPackages for data analysis such as purr, pelt, peshape\n\n\nLatex and markdown for writing and formatting documents\n\n\nmongoDB as our non relational database\n\nI learned a lot about genomics and the standards for handling the digital data associated with it, such as bcl, fasta/fastq, bam/cram, vcf and cli tools to manipulate them like the one from Illumina.\nSince our area was in the middle of the production process, I had to interact with different teams to understand the different processes and the different roles they had.\nFull Stack Web Developer at SZICOM\n\n2019-2020\n\nI was able to keep up with a team of Senior Developers with over 10 years of experience at SZICOM. We developed the web app “Distribution Management System” for Naturgy (MX).\n\nBackend Development:\n\nC# with .Net Core\nEntity Framework Core\nSQL Server\nVisual Studio\n\n\nFrontend Development:\n\nAngular with HTML and CSS\ntypeScript + javaScript\nVisual Studio Code\n\n\nAgile methodologies\nUnit and Integration Testing\nCI/CD\nDesign Patterns\nEvent systems architecture with RabbitMQ\nTools:\n\nJenkins\nRobot Framework for UI end to end testing\n\n\n\nEducational Robotics Teacher\n\n2018\n\nI was a teacher at Taller Big Bang, which was a science institute for children where we taught 3 courses:\n\nEducational robotics with LEGO Education\n\nLEGO WeDo (6-8 years)\nLEGO Mindstorms (9-11 years)\n\n\nVideo Game creation\n\n\nLanguages\n\nEnglish (Fluent)\nSpanish (Native)\n\n\nSelf Learner\nI have a passion for learning and I’m constantly studying and trying out new stuff. I don’t have the time to journal all of them, so be sure to check out my GitHub if you are interested in seeing what I’ve been working on lately.\nSnake with local multiplayer\nWith my interest in rust and game development, I took a shot at building a multiplayer snake game with Bevy. I learned about the ECS framework and data oriented Rust\nQWorld Global Quantum Programming Workshop | QBronze\nIntroductory level workshop series on the basics of quantum computing\nand quantum programming using Jupyter notebooks.\nThe Bronze has five main sections\n\nBasics of classical systems (Probabilistic bits, coin-flipping, biased coins, probabilistic states, and probabilistic operators, correlation)\nBasics of quantum systems (Quantum programs as circuits: registers, gates, measurements, execution, and reading the outcomes, quantum state and operators)\nQuantum operators on a quantum bot\nEntanglement and basics quantum protocols\nQuantum search algorithm\n\nArtificial Intelligence\nI’ve always been curious about AI, so I took open courses from Stanford, MIT, OpenAI, FastAI\nusing Pytorch and TensorFlow on topics such as Computer Vision and Reinforcement Learning.\nI’m familiar with various architectures (RNN, LSTM, Transformers, CNN, Generative Models such as VAE and GAN).\nUnity 3D\nCreated a simple infinite runner game using the Unity3d engine with C#.\nI followed tutorials from Brackeys and Unity Learn.\n\nFormal education\nBachelor in Computer Science\n\n2018-2022\n\n70% of the career completed\nFCEIA - UNR\nBachelor in Exact Sciences\n\n2018-2020\n\nFCEIA - UNR\nConstruction Technician\n\n2012-2017\n\nInstituto Politécnico Superior, General San Martín\n","path":null}]